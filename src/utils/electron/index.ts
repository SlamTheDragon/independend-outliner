import { app, BrowserWindow, Menu } from 'electron'
import { Logging } from './logging/logging'
import { Shutdown } from './shutdown'
import './ipc-main/ipc-on'


const logging = new Logging('main')
logging.info('### STARTING INDEPENDENT OUTLINER ###')

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const foo = new Shutdown(0)
}

// Create the main browser window.
export let mainWindow: BrowserWindow

const createWindow = (): void => {
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 750,
        // center: true,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    })
    // and load the index.html of the app.
    // mainWindow.setMenu(null)
    // Menu.setApplicationMenu(menu)
    mainWindow.setMenu(menu)
    mainWindow.setMenuBarVisibility(true)
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

    logging.info('window configurations loaded')
}

// Menu
const menu = Menu.buildFromTemplate([
    // { role: 'appMenu' }
    // ...(isMac
    //     ? [{
    //         label: app.name,
    //         submenu: [
    //             { role: 'about' },
    //             { type: 'separator' },
    //             { role: 'services' },
    //             { type: 'separator' },
    //             { role: 'hide' },
    //             { role: 'hideOthers' },
    //             { role: 'unhide' },
    //             { type: 'separator' },
    //             { role: 'quit' }
    //         ]
    //     }]
    //     : []),
    // { role: 'fileMenu' }
    {
        label: 'File',
        submenu: [
            { role: 'close' },
        ]
    },
    // { role: 'editMenu' }
    {
        label: 'Edit',
        submenu: [
            { role: 'undo' },
            { role: 'redo' },
            { type: 'separator' },
            { role: 'cut' },
            { role: 'copy' },
            { role: 'paste' },
            // ...(isMac
            //     ? [
            //         { role: 'pasteAndMatchStyle' },
            //         { role: 'delete' },
            //         { role: 'selectAll' },
            //         { type: 'separator' },
            //         {
            //             label: 'Speech',
            //             submenu: [
            //                 { role: 'startSpeaking' },
            //                 { role: 'stopSpeaking' }
            //             ]
            //         }
            //     ]
            //     : [
            //         { role: 'delete' },
            //         { type: 'separator' },
            //         { role: 'selectAll' }
            //     ])
        ]
    },
    // { role: 'viewMenu' }
    {
        label: 'View',
        submenu: [
            { role: 'reload' },
            { role: 'forceReload' },
            { role: 'toggleDevTools' },
            { type: 'separator' },
            { role: 'resetZoom' },
            { role: 'zoomIn' },
            { role: 'zoomOut' },
            { type: 'separator' },
            { role: 'togglefullscreen' }
        ]
    },
    // { role: 'windowMenu' }
    {
        label: 'Window',
        submenu: [
            { role: 'minimize' },
            { role: 'zoom' },
            // ...(isMac
            //     ? [
            //         { type: 'separator' },
            //         { role: 'front' },
            //         { type: 'separator' },
            //         { role: 'window' }
            //     ]
            //     : [
            //         { role: 'close' }
            //     ])
        ]
    },
    // {
    //     role: 'help',
    //     submenu: [
    //         {
    //             label: 'Learn More',
    //             click: async () => {
    //                 const { shell } = require('electron')
    //                 await shell.openExternal('https://electronjs.org')
    //             }
    //         }
    //     ]
    // }
])

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    logging.debug('attempting to create window')
    createWindow()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        return new Shutdown(0)
    }
})


// OS X
app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        logging.debug('attempting to create window')
        createWindow()
    }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
